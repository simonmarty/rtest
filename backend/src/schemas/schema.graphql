schema {
  query: Query
  mutation: Mutation
}

type User {
  _id: ID!
  username: String!
  email: String
  firstName: String
  lastName: String
  createdAt: Timestamp!
}

input UserInput {
  username: String!
  email: String
  firstName: String
  lastName: String
  password: String
}

type Course {
  _id: ID!
  name: String
  code: String
  semester: String
  files: [File]
  sections: [Section]
  assignmentGroups: [AssignmentGroup]
}

type Section {
  number: Int
  instructor: User
  students: [User]
  assistants: [User]
}

input CourseInput {
  name: String
  code: String
  semester: String
  files: [FileInput]
}

type AssignmentGroup {
  _id: ID!
  name: String!
  tag: String!
  grading: GradingRules!
  assignments: [Assignment]
}

input AssignmentGroupInput {
  name: String!
  tag: String!
  grading: GradingRulesInput!
}

type GradingRules {
  weight: Int!
  policy: String!
}

input GradingRulesInput {
  weight: Int!
  policy: String!
}

type Assignment {
  _id: ID!
  name: String!
  body: String
  maxGrade: Int
  dateDue: Timestamp!
  optional: Boolean!
  locked: Boolean!
  files: File
  submissions: [Submission]
  createdAt: Timestamp!
}

input AssignmentInput {
  name: String
  body: String
  maxGrade: Int
  dateDue: Timestamp!
  optional: Boolean
  locked: Boolean
}

type Submission {
  _id: ID!
  student: User!
  peerGrades: [peerGrade]
  files: [File]
  grade: Float
  submittedAt: Timestamp!
}

type peerGrade{
  grader: User!
  grade: Float
  comment: String
  gradedAt: Timestamp!
}

input peerGradeInput{
  grade: Float
  comment: String
}

input SubmissionInput {
  student: UserInput!
  files: [FileInput]
}

input GradeInput {
  submission: ID!
  grade: Float!
}

# Uploaded file
type File {
  # The original name of the uploaded file
  originalName: String!
  # The file's mimetype
  mimetype: String!
  # The path to the file in S3
  bucket: String!
  key: String!
  # The size of the file in bytes
  size: Int!
}

input FileInput {
  originalName: String!
  # The path to the file in S3
  bucket: String!
  key: String!
}

scalar Timestamp

# ----------------------------------

type Query {
  hello: String!
  me: User

  user(id: ID, username: String): User
  users: [User]!
  assignment(id: ID): Assignment
  submission(id: ID): Submission
  course(id: ID): Course
  courseUNSAFE(id: ID): Course
  coursesUNSAFE: [Course]
  courseTeaching(id: ID!): Course
  coursesTeaching: [Course]
  assignmentGroup(id: ID): AssignmentGroup

  # TODO make these dependent on assignment instead of bucket
  getPresignedUpload(bucket: String, key: String): String!
  getPresignedDownload(bucket: String, key: String): String!

  assignments: [Assignment]
  submissions: [Submission]
  courses: [Course]
  assignmentGroups: [AssignmentGroup]
}

type Mutation {
  # COURSES
  createCourse(course: CourseInput): Course
  createSubmission(submission: SubmissionInput): Submission
  createAssignmentGroup(course: ID!, assignmentGroup: AssignmentGroupInput): AssignmentGroup
  updateGrade(submission: ID!, grade: Float): Float
  peerGradeSubmission(submission: ID!, grader: ID!, peergrade: peerGradeInput): peerGrade
  updateCourse(id: ID!, course: CourseInput!): Course
  deleteCourse(id: ID!): Course
  addInstructorToCourse(instructorId: ID!, courseId: ID!, section: Int): ID!
  addStudentToCourse(studentId: ID!, courseId: ID!, section: Int): ID!
  removeStudentFromCourse(student: ID!, course: ID!, section: Int): ID!

  # ASSIGNMENT GROUP
  createAssignmentGroup(courseId: ID!, assignmentGroup: AssignmentGroupInput): AssignmentGroup
  updateAssignmentGroup(id: ID!, assignmentGroup: AssignmentGroupInput!): AssignmentGroup
  deleteAssignmentGroup(id: ID!): Assignment

  # ASSIGNMENT
  createAssignment(assignmentGroupId: ID!, assignment: AssignmentInput): Assignment
  updateAssignment(id: ID!, assignment: AssignmentInput!): Assignment
  deleteAssignment(id: ID!): Assignment

  # SUBMISSION
  createSubmission(submission: SubmissionInput): Submission
  gradeSubmission(submission: ID!, grade: Float): Float

  # USER
  signup(user: UserInput!): String
  login(username: String!, password: String!): String
  updateUser(id: ID!, user: UserInput!): User!
  deleteUser(id: ID!): ID!

  # FILE
  addSubmissionFile(course: ID!, assignment: ID!, submission: ID!, filename: String!): String!
  registerSubmissionFile(submission: ID!, file: FileInput!): File
}
