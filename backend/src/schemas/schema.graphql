schema {
  query: Query
  mutation: Mutation
}

type User {
  _id: ID!
  username: String!
  firstName: String
  email: String
  lastName: String
  createdAt: Timestamp!
}

input UserInput {
  username: String
  firstName: String
  lastName: String
  email: String
  password: String
}

type Course {
  _id: ID!
  courseNumber: String!
  name: String
  semester: String
  students: [User]
  instructor: User
  assistants: [User]
  assignmentGroups: [AssignmentGroup]
}

input CourseInput {
  courseNumber: String!
  name: String
  semester: String
}

type Assignment {
  _id: ID!
  tags: [AssignmentTag]
  name: String!
  body: String
  maxGrade: Int
  submissions: [Submission]
  dateCreated: Timestamp!
  datePosted: Timestamp
  dateDue: Timestamp
}

type AssignmentGroup {
  _id: ID!
  name: String!
  tag: String!
  grading: Int!
  policy: String!
  assignments: [Assignment]
}

input AssignmentInput {
  name: String!
  body: String
  assignmentGroupId: ID!
  maxGrade: Int
  dateDue: Timestamp
  tags: [AssignmentTag]
}

enum AssignmentTag {
  PEERGRADED
  CODING
}

type Submission {
  _id: ID!
  student: User!
  grade: Float
  files: [File]
  dateSubmitted: Timestamp!
  attemptNumber: Int
}

input SubmissionInput {
  student: ID!
  assignmentId: ID!
  files: [FileInput]
}

input GradeInput {
  submission: ID!
  grade: Float!
}

# Uploaded file
type File {
  # The original name of the uploaded file
  originalName: String!
  # The file's mimetype
  mimetype: String!
  # The path to the file in S3
  bucket: String!
  key: String!
  # The size of the file in bytes
  size: Int!
}

input FileInput {
  originalName: String!
  # The path to the file in S3
  bucket: String!
  key: String!
}

input AssignmentGroupInput {
  name: String!
  courseId: ID!
  tag: String!
  grading: GradingRules!
}

input GradingRules {
  policy: String!
  weight: Int!
}

scalar Timestamp

# ----------------------------------

type Query {
  # Retrieve user through a user ID or through the token passed to
  # Query. Leave id empty if you'd like to view the currently logged in
  # user.
  hello: String!
  me: User

  user(id: ID, username: String): User
  users: [User]!
  assignment(id: ID): Assignment
  submission(id: ID): Submission
  course(id: ID): Course
  assignmentGroup(id: ID): AssignmentGroup

  # TODO make these dependent on assignment instead of bucket
  getPresignedUpload(bucket: String, key: String): String!
  getPresignedDownload(bucket: String, key: String): String!

  assignments: [Assignment]
  submissions: [Submission]
  courses: [Course]
  assignmentGroups: [AssignmentGroup]
}

type Mutation {
  createAssignment(assignment: AssignmentInput): Assignment
  createCourse(course: CourseInput): Course
  createSubmission(submission: SubmissionInput): Submission
  createAssignmentGroup(assignmentGroup: AssignmentGroupInput): AssignmentGroup
  updateGrade(submission: ID!, grade: Float): Float
  addStudentToCourse(student: ID!, course: ID!, section: Int): ID!
  addInstructorToCourse(instructor: ID!, course: ID!, section: Int): ID!
  removeStudentFromCourse(student: ID!, course: ID!, section: Int): ID!
  removeUser(user: ID!): ID!
  addSubmissionFile(course: ID!, assignment: ID!, submission: ID!, filename: String!): String!
  registerSubmissionFile(submission: ID!, file: FileInput!): File
  updateUser(id: ID!, userData: UserInput!): User!
  signup(userInput: UserInput!): String
}
