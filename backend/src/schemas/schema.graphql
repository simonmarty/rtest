schema {
  query: Query
  mutation: Mutation
}

type User {
  username: String!
  firstName: String!
  email: String!
  lastName: String!
  createdAt: Timestamp!
}

input UserInput {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
}

type Course {
  _id: ID!
  subject: String!
  courseNumber: String!
  year: Int
  semester: String
  students: [User]
  instructors: [User]
  assignmentGroups: [AssignmentGroup]
}

input CourseInput {
  subject: String!
  courseNumber: String!
  year: Int
  semester: String
}

type Assignment {
  _id: ID!
  tags: [AssignmentTag]
  name: String!
  body: String
  maxGrade: Int
  dateCreated: Timestamp!
  datePosted: Timestamp
  dateDue: Timestamp
}

type AssignmentGroup {
  _id: ID!
  name: String!
  tag: String!
  grading: Int!
  policy: String!
  assignments: [Assignment]
}

input AssignmentInput {
  name: String!
  body: String
  assignmentGroupId: ID!
  maxGrade: Int
  dateDue: Timestamp
  tags: [AssignmentTag]
}

enum AssignmentTag {
  PEERGRADED
  CODING
}

type Submission {
  _id: ID!
  student: User!
  files: [File!]!
  dateSubmitted: Timestamp!
  attemptNumber: Int!
}

input SubmissionInput {
  student: ID!
  assignmentId: ID!
  files: [FileInput]
}

type Grade {
  id: ID!
  submissionId: ID!
  grade: Float!
}

input GradeInput {
  student: String!
  assignmentId: ID!
  grade: Float!
}

# Uploaded file
type File {
  # The original name of the uploaded file
  original_name: String!
  # The file's encoding
  encoding: String!
  # The file's mimetype
  mimetype: String!
  # The path to the file in S3
  path: String!
  # The size of the file in bytes
  size: Int!
  # The formatted size of the file in human-readable units
  size_formatted: String!
}

input FileInput {
  original_name: String!
  # The file's encoding
  encoding: String!
  # The file's mimetype
  mimetype: String!
  # The path to the file in S3
  path: String!
}

input AssignmentGroupInput {
  name: String!
  courseId: ID!
  tag: String!
  grading: GradingRules!
}

input GradingRules {
  policy: String!
  weight: Int!
}

scalar Timestamp

# ----------------------------------

type Query {
  # Retrieve user through a user ID or through the token passed to
  # Query. Leave id empty if you'd like to view the currently logged in
  # user.
  hello: String!
  user(id: ID, username: String): User
  assignment(id: ID): Assignment
  submission(id: ID): Submission
  course(id: ID): Course
  assignmentGroup(id: ID): AssignmentGroup

  # TODO make these dependent on assignment instead of bucket
  getPresignedUpload(bucket: String, key: String): String!
  getPresignedDownload(bucket: String, key: String): String!
  
  assignments: [Assignment]
  submissions: [Submission]
  courses: [Course]
  assignmentGroups: [AssignmentGroup]
}

type Mutation {
  # createUser(user: UserInput): User
  createAssignment(assignment: AssignmentInput): Assignment
  createCourse(course: CourseInput): Course
  createSubmission(submission: SubmissionInput): Submission
  createAssignmentGroup(assignmentGroup: AssignmentGroupInput): AssignmentGroup
  updateGrade(grade: GradeInput): Float
}
